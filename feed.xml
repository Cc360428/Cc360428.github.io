

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://cc360428.github.io//</id>
  <title>Cc Blog</title>
  <subtitle># A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-05-12T21:23:23+08:00</updated>
  <author>
    <name>Cc</name>
    <uri>https://cc360428.github.io//</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://cc360428.github.io//feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://cc360428.github.io//"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 Cc </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>CDN</title>
    <link href="https://cc360428.github.io//posts/CDN/" rel="alternate" type="text/html" title="CDN" />
    <published>2024-04-28T12:48:54+08:00</published>
  
    <updated>2024-04-28T12:48:54+08:00</updated>
  
    <id>https://cc360428.github.io//posts/CDN/</id>
    <content src="https://cc360428.github.io//posts/CDN/" />
    <author>
      <name>Cc</name>
    </author>

  
    
    <category term="DevOps" />
    
    <category term="Network" />
    
  

  
    <summary>
      





      CDN


  CDN 是内容分发网络（Content Delivery Network）的缩写。它是一个由分布在全球各地的服务器网络组成的系统，用于在用户请求内容时快速交付网站、应用程序、音频、视频和其他互联网内容


工作原理


  网络架构：CDN 由多个位于全球各地的服务器节点组成，这些节点通常称为边缘服务器。这些服务器节点分布在地理位置上的关键位置，以便尽可能地靠近最终用户。
  工作原理：当用户请求访问一个网站或者特定的内容时，CDN 系统会自动选择最接近用户的服务器节点来提供内容。这样做可以减少数据传输的距离，从而降低延迟和提高加载速度。
  内容缓存：CDN 会将网站的静态内容（如图像、样式表、脚本等）缓存到其服务器节点上。当有用户请求相同内容时，CDN 会直接从缓存中提供，而不是从原始服务器获取，这样可以减轻原始服务器的负载。
  负载均衡：CDN 能够智能地分配...
    </summary>
  

  </entry>

  
  <entry>
    <title>ClickHouse</title>
    <link href="https://cc360428.github.io//posts/clickhouse-base/" rel="alternate" type="text/html" title="ClickHouse" />
    <published>2024-04-08T12:48:54+08:00</published>
  
    <updated>2024-04-08T12:48:54+08:00</updated>
  
    <id>https://cc360428.github.io//posts/clickhouse-base/</id>
    <content src="https://cc360428.github.io//posts/clickhouse-base/" />
    <author>
      <name>Cc</name>
    </author>

  
    
    <category term="Dev" />
    
    <category term="Database" />
    
    <category term="Clickhouse" />
    
  

  
    <summary>
      





      ClickHouse 是一个用于实时分析的开源列式数据库管理系统 (DBMS)，它最初由俄罗斯的 Yandex 公司开发，并且在 2016 年开源。下面是一些关于 ClickHouse 的介绍、优缺点以及一些最大阈值的信息：

介绍


  列式存储 ：ClickHouse 是一个列式存储的数据库，这意味着它将数据按列而不是按行存储。这种存储方式使得它非常适合进行大规模的数据分析和聚合操作。
  高性能 ：ClickHouse 的设计目标之一是提供高性能的数据查询和分析能力。它能够处理大量数据，并且在复杂的查询情况下保持高性能。
  分布式架构 ：ClickHouse 支持分布式架构，可以水平扩展以处理大规模数据集。它可以通过添加更多的节点来增加存储容量和查询吞吐量。
  SQL 兼容性 ：ClickHouse 支持 SQL 查询语言，这使得用户可以使用熟悉的语法进行数据分析和查询操...
    </summary>
  

  </entry>

  
  <entry>
    <title>Kubernetes Work CMD</title>
    <link href="https://cc360428.github.io//posts/k8s-work-cmd/" rel="alternate" type="text/html" title="Kubernetes Work CMD" />
    <published>2024-03-16T12:23:54+08:00</published>
  
    <updated>2024-05-12T20:51:00+08:00</updated>
  
    <id>https://cc360428.github.io//posts/k8s-work-cmd/</id>
    <content src="https://cc360428.github.io//posts/k8s-work-cmd/" />
    <author>
      <name>Cc</name>
    </author>

  
    
    <category term="DevOps" />
    
    <category term="Kubernetes" />
    
  

  
    <summary>
      





      Work CMD


  work cmd


generate

#!/bin/bash
KUBECONFIG=ind_dev:ind_dev_local:vn_dev:vn_dev_local kubectl config view --flatten &amp;gt;./config
KUBECONFIG=ind_dev:ind_dev_local:vn_dev:vn_dev_local kubectl config view --flatten &amp;gt;~/.kube/config


cmd

#!/bin/bash

kubectl config get-contexts        # 列出所有上下文
kubectl config use-context ind_dev # 切换上下文
kubectl config view                # 验证配置
#  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>开发脚本</title>
    <link href="https://cc360428.github.io//posts/redis-py-utils/" rel="alternate" type="text/html" title="开发脚本" />
    <published>2023-12-01T11:32:25+08:00</published>
  
    <updated>2023-12-01T11:32:25+08:00</updated>
  
    <id>https://cc360428.github.io//posts/redis-py-utils/</id>
    <content src="https://cc360428.github.io//posts/redis-py-utils/" />
    <author>
      <name>Cc</name>
    </author>

  
    
    <category term="Dev" />
    
    <category term="Utils" />
    
  

  
    <summary>
      





      redis 获取所有 key 并且打印输出

import redis
import datetime

# 设置 Redis 连接参数
host = '172.12.12.189'
port = 6000
password = ''
db = 12  # 指定要扫描的数据库编号
pattern = '2016:hide:*'  # 匹配以 '2016:' 开头的键

# 创建 Redis 客户端
redis_client = redis.Redis(host=host, port=port, password=password, db=db)

# 切换到指定的数据库
redis_client.select(db)

def get_hide(redis_client, keys, output_file):
    # 打开文件以追加写入
    with open(output...
    </summary>
  

  </entry>

  
  <entry>
    <title>Kubernetes Services</title>
    <link href="https://cc360428.github.io//posts/services/" rel="alternate" type="text/html" title="Kubernetes Services" />
    <published>2023-11-24T10:47:54+08:00</published>
  
    <updated>2023-11-24T10:47:54+08:00</updated>
  
    <id>https://cc360428.github.io//posts/services/</id>
    <content src="https://cc360428.github.io//posts/services/" />
    <author>
      <name>Cc</name>
    </author>

  
    
    <category term="DevOps" />
    
    <category term="Kubernetes" />
    
  

  
    <summary>
      





      Base


  
    服务类型：

    
      
        ClusterIP：

        
          类型：内部服务
          集群内部可访问的虚拟 IP。
          仅在集群内部可路由。
          默认服务类型。
          使用选择器将流量路由到匹配的 Pod。
          适用于在集群内部进行内部通信的服务。
        
      
      
        NodePort

        
          类型：外部服务
          在每个节点上公开一个固定的端口。
          外部流量可以通过节点的 IP 地址和 NodePort 访问服务。
          使用选择器将流量路由到匹配的 Pod。
          适用于需要从集群外部访问服务的...
    </summary>
  

  </entry>

</feed>


